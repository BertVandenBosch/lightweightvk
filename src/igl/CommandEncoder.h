/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <string>

namespace igl {

class ICommandBuffer;
class IDevice;

class ICommandEncoder {
 public:
  ICommandEncoder(std::shared_ptr<ICommandBuffer> commandBuffer) :
    commandBuffer_(std::move(commandBuffer)) {}

  virtual ~ICommandEncoder() = default;

  /**
   * Declares the end of commands generated by this instance of the encoder.
   *
   * After endEncoding() is called, the encoder is invalid. You must create
   * another encoder to submit more commands.
   */
  virtual void endEncoding() = 0;

  virtual void pushDebugGroupLabel(const std::string& label,
                                   const igl::Color& color = igl::Color(1, 1, 1, 1)) const = 0;
  virtual void insertDebugEventLabel(const std::string& label,
                                     const igl::Color& color = igl::Color(1, 1, 1, 1)) const = 0;
  virtual void popDebugGroupLabel() const = 0;

  ICommandBuffer& getCommandBuffer() {
    IGL_ASSERT(commandBuffer_);
    return *commandBuffer_;
  }

 private:
  std::shared_ptr<ICommandBuffer> commandBuffer_;
};

} // namespace igl
